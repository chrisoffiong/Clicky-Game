{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Cards/Cards.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","react_default","a","createElement","className","Cards","alt","name","src","image","onClick","clickPicture","id","Wrapper","shakeWrapper","pictures","App","state","cards","clickedArray","topScore","score","message","shakeit","shuffledArray","_this","shuffleArray","setState","includes","concat","picturesArray","i","length","j","Math","floor","random","_ref","_this2","this","components_Jumbotron_Jumbotron","components_Wrapper_Wrapper","map","picture","components_Cards_Cards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00e80c8a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Jumbotron.css\"\r\n\r\nconst Jumbotron = props => (\r\n    <div className =\"container\">\r\n    <div className= \"row\">\r\n    <div className=\"jumbotron\">\r\n          <h1 className=\"App-title\">Anime Memory Game</h1>\r\n          <strong>Let's see if you can remember anything.</strong> \r\n    </div>\r\n    </div>\r\n    </div>\r\n)\r\n\r\nexport default Jumbotron","import React from \"react\";\r\nimport \"./Cards.css\"\r\n\r\nconst Cards = props => (\r\n    <div className= \"center-align\">\r\n    <div className =\"card\">\r\n        <div className = \"card-image\">\r\n        <img className =\"images\" alt={props.name} src={props.image} onClick={() => props.clickPicture(props.id)}/>\r\n        </div>\r\n    </div>\r\n    </div>\r\n)\r\n\r\nexport default Cards","import React from \"react\";\r\n\r\n\r\nconst Wrapper = props => <div className= {props.shakeWrapper===\"true\" ? \"wrapperShake\" : \"wrapper\"}>{props.pictures}</div>;\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport Jumbotron from \"./components/Jumbotron\"\nimport Cards from \"./components/Cards\";\nimport Wrapper from \"./components/Wrapper\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  state = {\n    cards,\n    clickedArray: [],\n    topScore: 0,\n    score: 0,\n    message: \"\",\n    shakeit: \"false\"\n  };\n  clickPicture = id => {\n    const shuffledArray = this.shuffleArray(cards);\n    this.setState({cards: shuffledArray});\n    if (this.state.clickedArray.includes(id)) {\n      this.setState({ score: 0, clickedArray: [], message: \"WRONG. From the TOP\", shakeit: \"true\"});\n    }\n    else {\n      this.setState({\n        clickedArray: this.state.clickedArray.concat([id]),\n        score: this.state.score + 1,\n        message: \"Another One\",\n        shakeit: \"false\"\n      });\n    }\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score });\n    }\n  }\n  shuffleArray = (picturesArray) => {\n      for (let i = picturesArray.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          [picturesArray[i], picturesArray[j]] = [picturesArray[j], picturesArray[i]];\n      }\n      return picturesArray;\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\"></header>\n          <Jumbotron></Jumbotron>\n        <div className=\"center-align\">\n        <h3 className=\"App-intro\">\n          \n          <p className = \"score\"><strong>Score: {this.state.score} / HighScore: {this.state.topScore}</strong></p>\n          <p className=\"message\"><strong>{this.state.message}</strong></p>\n        </h3>\n        </div>\n        <div className=\"container\">\n        <Wrapper\n        shakeWrapper = {this.state.shakeit}\n        pictures=\n          {this.state.cards.map(picture => (\n            <Cards\n              clickPicture={this.clickPicture}\n              id={picture.id}\n              key={picture.id} \n              name={picture.name}\n              image={picture.image}\n            />\n          ))}\n        />\n        </div>\n       \n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}